<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="kr.go.civilservice.complaint.mapper.ComplaintMapper">

	<!-- 민원 목록 조회 -->
	<select id="selectComplaintList" parameterType="map"
		resultType="kr.go.civilservice.complaint.model.ComplaintVO">
		SELECT
		c.COMPLAINT_ID as complaintId,
		c.TITLE as title,
		c.CONTENT as content,
		c.MEMBER_ID as memberId,
		c.STATUS as status,
		c.CREATED_DATE as createdDate,
		c.MODIFIED_DATE as modifiedDate,
		c.COMPLETED_DATE as completedDate,
		c.PRIVATE_INFO_YN as privateInfoYn,
		c.PUBLIC_YN as publicYn,
		m.NAME as memberName,
		CASE
		WHEN c.status = 'PENDING' THEN '접수대기'
		WHEN c.status = 'PROCESSING' THEN '처리중'
		WHEN c.status = 'COMPLETED' THEN '처리완료'
		WHEN c.status = 'REJECTED' THEN '반려'
		END as statusName
		FROM COMPLAINT c
		JOIN MEMBER m ON c.MEMBER_ID = m.MEMBER_ID
		WHERE 1=1
		<if test="searchType != null and searchKeyword != null">
			<choose>
				<when test="searchType == 'title'">
					AND c.TITLE LIKE '%' || #{searchKeyword} || '%'
				</when>
				<when test="searchType == 'content'">
					AND c.CONTENT LIKE '%' || #{searchKeyword} || '%'
				</when>
				<when test="searchType == 'writer'">
					AND m.NAME LIKE '%' || #{searchKeyword} || '%'
				</when>
			</choose>
		</if>
		<if test="status != null">
			AND c.STATUS = #{status}
		</if>
		ORDER BY c.COMPLAINT_ID DESC
	</select>

	<!-- 민원 상세 조회 -->
	<select id="selectComplaintById" parameterType="long"
		resultType="kr.go.civilservice.complaint.model.ComplaintVO">
		SELECT
		c.COMPLAINT_ID as complaintId,
		c.TITLE as title,
		c.CONTENT as content,
		c.MEMBER_ID as memberId,
		c.STATUS as status,
		c.CREATED_DATE as createdDate,
		c.MODIFIED_DATE as modifiedDate,
		c.COMPLETED_DATE as completedDate,
		c.PRIVATE_INFO_YN as privateInfoYn,
		c.PUBLIC_YN as publicYn,
		m.NAME as memberName,
		CASE
		WHEN c.status = 'PENDING' THEN '접수대기'
		WHEN c.status = 'PROCESSING' THEN '처리중'
		WHEN c.status = 'COMPLETED' THEN '처리완료'
		WHEN c.status = 'REJECTED' THEN '반려'
		END as statusName
		FROM COMPLAINT c
		JOIN MEMBER m ON c.MEMBER_ID = m.MEMBER_ID
		WHERE c.COMPLAINT_ID = #{complaintId}
	</select>

	<!-- 민원 등록 -->
	<insert id="insertComplaint"
		parameterType="kr.go.civilservice.complaint.model.ComplaintVO">
		<selectKey keyProperty="complaintId" order="BEFORE"
			resultType="long">
			SELECT SEQ_COMPLAINT_ID.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO COMPLAINT (
		COMPLAINT_ID, TITLE, CONTENT, MEMBER_ID,
		STATUS, CREATED_DATE, PRIVATE_INFO_YN, PUBLIC_YN
		) VALUES (
		#{complaintId}, #{title}, #{content}, #{memberId},
		'PENDING', SYSDATE,
		#{privateInfoYn, jdbcType=CHAR},
		#{publicYn, jdbcType=CHAR}
		)
	</insert>

	<!-- 민원 수정 -->
	<update id="updateComplaint"
		parameterType="kr.go.civilservice.complaint.model.ComplaintVO">
		UPDATE COMPLAINT SET
		TITLE = #{title},
		CONTENT = #{content},
		PUBLIC_YN = #{publicYn, jdbcType=CHAR},
		PRIVATE_INFO_YN = #{privateInfoYn, jdbcType=CHAR},
		MODIFIED_DATE = SYSDATE
		WHERE COMPLAINT_ID = #{complaintId}
	</update>

	<!-- 민원 삭제 -->
	<delete id="deleteComplaint" parameterType="long">
		DELETE FROM COMPLAINT WHERE COMPLAINT_ID = #{complaintId}
	</delete>

	<!-- 첨부파일 등록 -->
	<insert id="insertComplaintFile"
		parameterType="kr.go.civilservice.complaint.model.ComplaintFileVO">
		INSERT INTO COMPLAINT_FILE (
		FILE_ID, COMPLAINT_ID, ORIGINAL_FILENAME,
		STORED_FILENAME, FILE_SIZE, FILE_TYPE, CREATED_DATE
		) VALUES (
		SEQ_FILE_ID.NEXTVAL, #{complaintId}, #{originalFilename},
		#{storedFilename}, #{fileSize}, #{fileType}, SYSDATE
		)
	</insert>

	<!-- 민원별 첨부파일 목록 조회 -->
	<select id="selectComplaintFiles" parameterType="long"
		resultType="kr.go.civilservice.complaint.model.ComplaintFileVO">
		SELECT
		FILE_ID as fileId,
		COMPLAINT_ID as complaintId,
		ORIGINAL_FILENAME as originalFilename,
		STORED_FILENAME as storedFilename,
		FILE_SIZE as fileSize,
		FILE_TYPE as fileType,
		CREATED_DATE as createdDate
		FROM COMPLAINT_FILE
		WHERE COMPLAINT_ID = #{complaintId}
	</select>

	<!-- 첨부파일 단건 조회 -->
	<select id="selectComplaintFileById" parameterType="long"
		resultType="kr.go.civilservice.complaint.model.ComplaintFileVO">
		SELECT
		FILE_ID as fileId,
		COMPLAINT_ID as complaintId,
		ORIGINAL_FILENAME as originalFilename,
		STORED_FILENAME as storedFilename,
		FILE_SIZE as fileSize,
		FILE_TYPE as fileType,
		CREATED_DATE as createdDate
		FROM COMPLAINT_FILE
		WHERE FILE_ID = #{fileId}
	</select>

	<!-- 첨부파일 삭제 -->
	<delete id="deleteComplaintFile" parameterType="long">
		DELETE FROM COMPLAINT_FILE WHERE FILE_ID = #{fileId}
	</delete>

	<!-- 민원 상태 변경 -->
	<update id="updateComplaintStatus" parameterType="map">
		UPDATE COMPLAINT SET
		STATUS = #{status},
		MODIFIED_DATE = SYSDATE
		<if test="completedDate != null">
			, COMPLETED_DATE = #{completedDate}
		</if>
		WHERE COMPLAINT_ID = #{complaintId}
	</update>

	<!-- 민원 처리이력 등록 -->
	<insert id="insertComplaintHistory" parameterType="map">
		INSERT INTO COMPLAINT_HISTORY (
		HISTORY_ID, COMPLAINT_ID, STATUS,
		HANDLER_ID, PROCESS_COMMENT, REQUEST_FILES,
		REQUEST_DEADLINE, RESULT_CONTENT, CREATED_DATE
		) VALUES (
		SEQ_HISTORY_ID.NEXTVAL,
		#{complaintId},
		#{status},
		#{handlerId},
		#{processComment, jdbcType=VARCHAR},
		#{requestFiles, jdbcType=VARCHAR},
		#{requestDeadline, jdbcType=DATE},
		#{resultContent, jdbcType=VARCHAR},
		SYSDATE
		)
	</insert>

	<!-- 민원 처리이력 조회 -->
	<select id="selectComplaintHistories" parameterType="long"
		resultType="kr.go.civilservice.complaint.model.ComplaintHistoryVO">
		SELECT
		h.HISTORY_ID as historyId,
		h.COMPLAINT_ID as complaintId,
		h.STATUS as status,
		h.HANDLER_ID as handlerId,
		h.PROCESS_COMMENT as processComment,
		h.REQUEST_FILES as requestFiles,
		h.REQUEST_DEADLINE as requestDeadline,
		h.RESULT_CONTENT as resultContent,
		h.CREATED_DATE as createdDate,
		m.NAME as handlerName,
		CASE
		WHEN h.status = 'PENDING' THEN '접수대기'
		WHEN h.status = 'PROCESSING' THEN '처리중'
		WHEN h.status = 'COMPLETED' THEN '처리완료'
		WHEN h.status = 'REJECTED' THEN '반려'
		END as statusName
		FROM COMPLAINT_HISTORY h
		LEFT JOIN MEMBER m ON h.HANDLER_ID = m.MEMBER_ID
		WHERE h.COMPLAINT_ID = #{complaintId}
		ORDER BY h.CREATED_DATE DESC
	</select>

	<!-- 민원 상태별 통계 -->
	<select id="selectComplaintStatsByStatus" resultType="map">
		SELECT
		STATUS,
		CASE
		WHEN STATUS = 'PENDING' THEN '접수대기'
		WHEN STATUS = 'PROCESSING' THEN '처리중'
		WHEN STATUS = 'COMPLETED' THEN '처리완료'
		WHEN STATUS = 'REJECTED' THEN '반려'
		END as statusName,
		COUNT(*) as count
		FROM COMPLAINT
		GROUP BY STATUS
		ORDER BY STATUS
	</select>

	<!-- 월별 민원 통계 -->
	<select id="selectComplaintStatsByMonth" resultType="map">
		SELECT
		TO_CHAR(CREATED_DATE, 'YYYY-MM') as month,
		COUNT(*) as count
		FROM COMPLAINT
		WHERE CREATED_DATE >= ADD_MONTHS(SYSDATE, -11)
		GROUP BY TO_CHAR(CREATED_DATE, 'YYYY-MM')
		ORDER BY month
	</select>

	<select id="selectComplaintListWithPaging" parameterType="map" resultType="complaintVO">
    <![CDATA[
    SELECT * FROM (
        SELECT a.*, ROWNUM rnum FROM (
            SELECT
            c.COMPLAINT_ID as complaintId,
            c.TITLE as title,
            c.MEMBER_ID as memberId,
            c.STATUS as status,
            c.CREATED_DATE as createdDate,
            m.NAME as memberName,
            CASE
                WHEN c.status = 'PENDING' THEN '접수대기'
                WHEN c.status = 'PROCESSING' THEN '처리중'
                WHEN c.status = 'COMPLETED' THEN '처리완료'
                WHEN c.status = 'REJECTED' THEN '반려'
            END as statusName
            FROM COMPLAINT c
            JOIN MEMBER m ON c.MEMBER_ID = m.MEMBER_ID
            ORDER BY c.COMPLAINT_ID DESC
        ) a WHERE ROWNUM <= #{start} + #{size}
    ) WHERE rnum > #{start}
    ]]>
</select>

	<select id="getTotalComplaintCount" resultType="int">
		SELECT COUNT(*) FROM COMPLAINT
	</select>

</mapper>